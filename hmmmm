local player = game.Players.LocalPlayer
local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))() 
local Players = game:GetService("Players")
local playerName = Players.LocalPlayer.DisplayName
local greetings = {
   "Hello",
   "Welcome",
   "Hi",
   "Greetings",
   "Hey there",
   "Good to see you",
   "What's up",
   "Nice to have you here",
   "Yo",
   "Ahoy",
   "Salutations",
   "Howdy",
   "Good day",
   "Pleasure to see you",
   "Welcome back",
   "Hey, buddy",
   "Hello there",
   "Hiya",
   "Wassup",
   "Ello gov'nor"
}

local randomGreeting = greetings[math.random(1, #greetings)]
local playerName = Players.LocalPlayer.DisplayName

local currentTime = os.date("%I:%M:%S %p")
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local function sendMessage(message)
    local textChannel = TextChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral")
    if textChannel then
        textChannel:SendAsync(message)
    end
end

local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/zynlope/rayfield/refs/heads/main/hmmm'))() 
local title = randomGreeting .. ", " .. playerName .. " - " .. currentTime

local Window = Rayfield:CreateWindow({
   Name = title,
   Icon = 109432796928380,
   LoadingTitle = "zynlope rewrite",
   LoadingSubtitle = "discord: plusgiant",

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "Big Hub"
   },

   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   },

   KeySystem = false,
   KeySettings = {
      Title = "hands up nigga",
      Subtitle = "key system",
      Note = "contact owner for key        discord: plusgiant",
      FileName = "zynlope script",
      SaveKey = false,
      GrabKeyFromSite = false,
      Key = {"ngtotheng"}
   },

   Theme = {
      TextColor = Color3.fromRGB(240, 240, 240),
      Background = Color3.fromRGB(15, 15, 15),
      Topbar = Color3.fromRGB(13, 13, 13),
      Shadow = Color3.fromRGB(20, 20, 20),

      NotificationBackground = Color3.fromRGB(15, 15, 15),
      NotificationActionsBackground = Color3.fromRGB(230, 230, 230),

      TabBackground = Color3.fromRGB(20, 20, 20),
      TabStroke = Color3.fromRGB(85, 85, 85),
      TabBackgroundSelected = Color3.fromRGB(246, 171, 61),
      TabTextColor = Color3.fromRGB(240, 240, 240),
      SelectedTabTextColor = Color3.fromRGB(40, 40, 40),

      ElementBackground = Color3.fromRGB(20, 20, 20),
      ElementBackgroundHover = Color3.fromRGB(30, 30, 30),
      SecondaryElementBackground = Color3.fromRGB(25, 25, 25),
      ElementStroke = Color3.fromRGB(38, 38, 38),
      SecondaryElementStroke = Color3.fromRGB(40, 40, 40),
            
      SliderBackground = Color3.fromRGB(50, 138, 220),
      SliderProgress = Color3.fromRGB(50, 138, 220),
      SliderStroke = Color3.fromRGB(58, 163, 255),

      ToggleBackground = Color3.fromRGB(18, 18, 18),
      ToggleEnabled = Color3.fromRGB(246, 171, 61),
      ToggleDisabled = Color3.fromRGB(100, 100, 100),
      ToggleEnabledStroke = Color3.fromRGB(246, 171, 61),
      ToggleDisabledStroke = Color3.fromRGB(125, 125, 125),
      ToggleEnabledOuterStroke = Color3.fromRGB(100, 100, 100),
      ToggleDisabledOuterStroke = Color3.fromRGB(65, 65, 65),

      DropdownSelected = Color3.fromRGB(20, 20, 20),
      DropdownUnselected = Color3.fromRGB(30, 30, 30),

      InputBackground = Color3.fromRGB(20, 20, 20),
      InputStroke = Color3.fromRGB(65, 65, 65),
      PlaceholderColor = Color3.fromRGB(178, 178, 178)
   }
})
local Tab = Window:CreateTab("main", 4483362458) 
local Section = Tab:CreateSection("change some settings for meepcity here.")
local StarterGui = game:GetService("StarterGui")
local savedObjects = {}

local Players = game:GetService("Players")
local player = Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

local jorkin = false
local track = nil

local function isR15(char)
    return char and char:FindFirstChildOfClass("Humanoid") and char:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R15
end

local anim = Instance.new("Animation")
anim.AnimationId = isR15(character) and "rbxassetid://698251653" or "rbxassetid://72042024"

local function stopAnimation()
    jorkin = false
    if track then
        track:Stop()
        track = nil
    end
end

local function playAnimationLoop()
    if not humanoid then return end
    if not track then
        track = humanoid:LoadAnimation(anim)
    end
    jorkin = true
    while jorkin do
        if not track then break end
        track:Play()
        track:AdjustSpeed(isR15(character) and 0.7 or 0.65)
        track.TimePosition = 0.6
        task.wait(0.1)
        while track and track.TimePosition < (isR15(character) and 0.7 or 0.65) and jorkin do
            task.wait(0.1)
        end
        if track then
            track:Stop()
        end
    end
end

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoid = character:WaitForChild("Humanoid")

    humanoid.Died:Connect(stopAnimation)

    anim.AnimationId = isR15(character) and "rbxassetid://698251653" or "rbxassetid://72042024"

    if jorkin then
        task.wait(1)
        task.spawn(playAnimationLoop)
    end
end)

humanoid.Died:Connect(stopAnimation)

local Toggle = Tab:CreateToggle({
    Name = "Jerk Off",
    CurrentValue = false,
    Flag = "Toggle_JerkOff",
    Callback = function(Value)
        if Value then
            task.spawn(playAnimationLoop)
        else
            stopAnimation()
        end
    end,
})

local Toggle = Tab:CreateToggle({
    Name = "Clean Backyard (less lag)",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        local vw = workspace:FindFirstChild("VW")

        if not vw then
            StarterGui:SetCore("SendNotification", {
                Title = "Clean Backyard",
                Text = "❌ VW not found!",
                Duration = 3
            })
            return
        end

        if Value then
            
            savedObjects = {} 
            for _, obj in ipairs(vw:GetChildren()) do
                if not (obj.Name == "1" or obj.Name == "2" or obj.Name == "3" or obj.Name == "BoomBox") then
                    table.insert(savedObjects, obj:Clone())
                    obj:Destroy()
                end
            end

            StarterGui:SetCore("SendNotification", {
                Title = "Clean Backyard",
                Text = "🧹 Backyard cleaned!",
                Duration = 3
            })
        else
            
            for _, obj in ipairs(savedObjects) do
                obj.Parent = vw
            end
            savedObjects = {}

            StarterGui:SetCore("SendNotification", {
                Title = "Clean Backyard",
                Text = "♻️ Backyard restored!",
                Duration = 3
            })
        end
    end,
})


local mutedBoomboxes = {}

local Toggle = Tab:CreateToggle({
    Name = "Mute boomboxes",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value then
            
            local vw = workspace:FindFirstChild("VW")
            if vw then
                for _, item in pairs(vw:GetDescendants()) do
                    if item:IsA("Model") or item:IsA("Part") then
                        if item.Name == "BoomBox" then
                            local sound = item:FindFirstChildOfClass("Sound")
                            if sound then
                                table.insert(mutedBoomboxes, {
                                    parent = item,
                                    sound = sound:Clone() 
                                })
                                sound:Destroy()
                            end
                        end
                    end
                end
            end
        else
            
            for _, data in pairs(mutedBoomboxes) do
                if data.parent and data.parent:IsDescendantOf(workspace) then
                    data.sound.Parent = data.parent
                end
            end
            mutedBoomboxes = {} 
        end
    end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spoof PLUS/BOOMBOX/CANDYPACK",
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(Value)
      if Value then
        game.Players.LocalPlayer:SetAttribute("PLUS",true)
game.Players.LocalPlayer:SetAttribute("BoomBox",true)
game.Players.LocalPlayer:SetAttribute("CandyPack",true)
      else
         game.Players.LocalPlayer:SetAttribute("PLUS", false)
         game.Players.LocalPlayer:SetAttribute("BoomBox", false)
         game.Players.LocalPlayer:SetAttribute("CandyPack",false)
      end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Remove sparklers (no lag when people use it)",
   CurrentValue = false,
   Flag = "ToggleSparkler",
   Callback = function(Value)
       toggleEnabled = Value
       
       if toggleEnabled then
           
           local function removeSparklers()
               for _, obj in ipairs(workspace:GetDescendants()) do
                   if obj:IsA("Model") or obj:IsA("Part") then
                       if obj.Name == "Sparkler" then
                           obj:Destroy()
                       end
                   end
               end
           end
           
           
           removeSparklers()
           
           
           connection = workspace.DescendantAdded:Connect(function(obj)
               if obj.Name == "Sparkler" then
                   obj:Destroy()
               end
           end)
       else
           
           if connection then
               connection:Disconnect()
               connection = nil
           end
       end
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "Remove house doors (backyard)", 
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
       local door = game.Workspace:FindFirstChild("VW")
       if door then
           door = door:FindFirstChild("1")
           if door then
               door = door:FindFirstChild("NewDoorObject")
           end
       end

       if Value then
           
           if door then
               _G.SavedDoor = {
                   Parent = door.Parent,
                   Position = door:GetPivot(), 
                   Clone = door:Clone() 
               }
               door:Destroy()
               print("NewDoorObject deleted and saved.")
           else
               print("NewDoorObject not found.")
           end
       else
           
           if _G.SavedDoor and _G.SavedDoor.Clone then
               local restoredDoor = _G.SavedDoor.Clone
               restoredDoor.Parent = _G.SavedDoor.Parent
               restoredDoor:PivotTo(_G.SavedDoor.Position) 
               print("NewDoorObject restored.")
           else
               print("No saved door to restore.")
           end
       end
   end,
})

local isRealTimePlayerCountEnabled = false
local playerCountNotification = nil


local function updatePlayerCountNotification()
    if isRealTimePlayerCountEnabled then
        local playerCount = #game.Players:GetPlayers()
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Count",
            Text = "There are currently " .. playerCount .. " players in the game.",
            Icon = "rbxassetid://130225201432137",  
            Duration = 5
        })
    end
end


local Toggle = Tab:CreateToggle({
   Name = "Real time player count in server",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(value)
  isRealTimePlayerCountEnabled = value

        
        if isRealTimePlayerCountEnabled then
            
            updatePlayerCountNotification()

            
            game.Players.PlayerAdded:Connect(function(player)
                if isRealTimePlayerCountEnabled then
                    updatePlayerCountNotification()  
                end
            end)

            game.Players.PlayerRemoving:Connect(function(player)
                if isRealTimePlayerCountEnabled then
                    updatePlayerCountNotification()  
                end
            end)
        end
   end,
})


game.Players.PlayerAdded:Connect(function(player)
    if isRealTimePlayerCountEnabled then
        local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Joined",
            Text = player.Name .. " has joined the game.",
            Icon = playerHeadIcon,
            Duration = 5
        })
    end
end)

game.Players.PlayerRemoving:Connect(function(player)
    if isRealTimePlayerCountEnabled then
        local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        game.StarterGui:SetCore("SendNotification", {
            Title = "Player Left",
            Text = player.Name .. " has left the game.",
            Icon = playerHeadIcon,
            Duration = 5
        })
    end
end)

local Button = Tab:CreateButton({
   Name = "Make yourself slide",
   Callback = function()
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")
local hum = char:WaitForChild("Humanoid")

local sliding = false
local velocity = Vector3.zero
local slideSpeed = 1

for _, part in ipairs(char:GetDescendants()) do
    if part:IsA("BasePart") then
        part.CustomPhysicalProperties = PhysicalProperties.new(0.03, 0, 0, 0, 0)
    end
end

RunService.Heartbeat:Connect(function()
    if sliding then
        local cam = workspace.CurrentCamera
        local moveDir = Vector3.zero

        if UIS:IsKeyDown(Enum.KeyCode.W) then moveDir += cam.CFrame.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.S) then moveDir -= cam.CFrame.LookVector end
        if UIS:IsKeyDown(Enum.KeyCode.A) then moveDir -= cam.CFrame.RightVector end
        if UIS:IsKeyDown(Enum.KeyCode.D) then moveDir += cam.CFrame.RightVector end

        moveDir = Vector3.new(moveDir.X, 0, moveDir.Z).Unit
        if moveDir.Magnitude > 0 then
            velocity = moveDir * slideSpeed
        else
            velocity *= 0.975
        end

        hrp.Velocity = Vector3.new(velocity.X, hrp.Velocity.Y, velocity.Z)
    end
end)

UIS.InputBegan:Connect(function(input, gpe)
    if gpe then return end
    if input.KeyCode == Enum.KeyCode.LeftShift then
        sliding = not sliding
        if not sliding then
            velocity = Vector3.zero
        end
    end
end)

   end,
})

local Section = Tab:CreateSection("fake coins (you can type text)")

local Input = Tab:CreateInput({
   Name = "Meep Coins",
   CurrentValue = "",
   PlaceholderText = "money amount",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
      
      local text = tostring(Value)

      game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CoinsContainer.Container.Amount.Text = text
      game:GetService("Players").SlayerssUnleashedd.PlayerGui.ShopGui.Background.Content.Main.TopContainer.CoinsContainer.TotalCoins.Text = text
      game:GetService("Players").SlayerssUnleashedd.PlayerGui.ScreenGui.ItemShop.ShopContent.TopBar.ButtonBuyCoins.CoinAmount.Text = text
   end,
})

local Button = Tab:CreateButton({
   Name = "Infinite Money",
   Callback = function()
      game:GetService("Players").LocalPlayer.PlayerGui.MainGui.CoinsContainer.Container.Amount.Text = math.huge
      game:GetService("Players").SlayerssUnleashedd.PlayerGui.ShopGui.Background.Content.Main.TopContainer.CoinsContainer.TotalCoins.Text = math.huge
      game:GetService("Players").SlayerssUnleashedd.PlayerGui.ScreenGui.ItemShop.ShopContent.TopBar.ButtonBuyCoins.CoinAmount.Text = math.huge
   end,
})

local Tab = Window:CreateTab("zynlope", 109432796928380) 
local Section = Tab:CreateSection("bullshit by me")

local scripts = {
    {name = "Firework fling (BUGGY)", url = "https://raw.githubusercontent.com/rolezeay/fireworkfilng/refs/heads/main/hmmm"},
    {name = "Chat Mimicker", url = "https://raw.githubusercontent.com/rolezeay/chatmimicker/refs/heads/main/hmmm"},
    {name = "Chat Logger", url = "http://raw.githubusercontent.com/zynlope/askgjuqkwjru-oq/refs/heads/main/hmmmmmm"},
    {name = "Load E to rewind character", url = "https://raw.githubusercontent.com/zynlope/qkjtkqjwkrjqr/refs/heads/main/hmmmmmm"},

    {name = "Midnight Mode", url = "custom", func = function()
        local Lighting = game:GetService("Lighting")
        Lighting.ClockTime = 24
        Lighting.Ambient = Color3.fromRGB(50, 50, 50)
        Lighting.OutdoorAmbient = Color3.fromRGB(50, 50, 50)
        Lighting.FogColor = Color3.fromRGB(0, 0, 0)
        Lighting.FogEnd = 500
        Lighting.Brightness = 1.0
    end},
    {name = "Anti AFK (Credits: Zynlope - proxycat)", url = "custom", func = function()
        local antiAFK = false
        antiAFK = not antiAFK
        if antiAFK then
            local player = game.Players.LocalPlayer
            local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"

            game.StarterGui:SetCore("SendNotification", {
                Title = "Anti AFK",
                Text = "Anti-AFK habilitado (enabled)",
                Icon = playerHeadIcon,
                Duration = 3,
                Button1 = "ok"
            })

            local vu = game:GetService("VirtualUser")
            game.Players.LocalPlayer.Idled:Connect(function()
                vu:CaptureController()
                vu:ClickButton2(Vector2.new(0, 0))
            end)
        end
    end},
    {name = "Wall Jump / Player Jump", url = "custom", func = function()
        local wallJumpForce = Vector3.new(0, -70, -70)
        local wallDetectionDistance = 3
        local cooldownTime = 0

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")
        local rootPart = character:WaitForChild("HumanoidRootPart")
        local canWallJump = true

        local function isNearWall()
            local rayParams = RaycastParams.new()
            rayParams.FilterDescendantsInstances = {character}
            rayParams.FilterType = Enum.RaycastFilterType.Blacklist

            local directions = {
                Vector3.new(1, 0, 0),
                Vector3.new(-1, 0, 0),
                Vector3.new(0, 0, 1),
                Vector3.new(0, 0, -1)
            }

            for _, dir in ipairs(directions) do
                local ray = workspace:Raycast(rootPart.Position, dir * wallDetectionDistance, rayParams)
                if ray then
                    return ray
                end
            end
            return nil
        end

        local function wallJump()
            if not canWallJump then return end
            local wallRay = isNearWall()
            if wallRay then
                canWallJump = false
                local jumpDirection = wallRay.Normal * wallJumpForce.Magnitude
                rootPart.Velocity = Vector3.new(jumpDirection.X, wallJumpForce.Y, jumpDirection.Z)
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                wait(cooldownTime)
                canWallJump = true
            end
        end

        game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
            if gameProcessed then return end
            if input.KeyCode == Enum.KeyCode.Space then
                wallJump()
            end
        end)
    end},
}

for _, scriptInfo in ipairs(scripts) do
    Tab:CreateButton({
        Name = scriptInfo.name,
        Callback = function()
            if scriptInfo.url == "custom" and scriptInfo.func then
                scriptInfo.func()
            else
                loadstring(game:HttpGet(scriptInfo.url))()
            end
        end,
    })
end

getgenv().WalkSpeedValue = 25
local BunnyHopActive = false
local BunnyHopConnection

local Player = game:GetService("Players").LocalPlayer
local Humanoid = Player.Character:WaitForChild("Humanoid")

Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
    Humanoid.WalkSpeed = getgenv().WalkSpeedValue
end)
Humanoid.WalkSpeed = getgenv().WalkSpeedValue

local Toggle = Tab:CreateToggle({
    Name = "Bunny Hop (+0.5 speed every jump)",
    CurrentValue = false,
    Flag = "BunnyHopToggle",
    Callback = function(Value)
        BunnyHopActive = Value

        if Value then
            getgenv().WalkSpeedValue = 25
            Humanoid.WalkSpeed = getgenv().WalkSpeedValue

            BunnyHopConnection = task.spawn(function()
                while BunnyHopActive do
                    if Humanoid.FloorMaterial ~= Enum.Material.Air then
                        Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                        getgenv().WalkSpeedValue += 0.5
                        Humanoid.WalkSpeed = getgenv().WalkSpeedValue
                        task.wait(0.5)
                    else
                        task.wait(0.1)
                    end
                end
            end)
        else
            getgenv().WalkSpeedValue = 25
            Humanoid.WalkSpeed = 25
        end
    end,
})

local Tab = Window:CreateTab("avatar", "user") 

local function colorToTable(clr)
    return {tostring(clr.R * 255), tostring(clr.G * 255), tostring(clr.B * 255)}
end

local function ExtractData(humdes)
    local ava = {}

    for _, v in pairs({"WidthScale", "HeightScale", "DepthScale", "BodyTypeScale", "ProportionScale", "HeadScale"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"Face", "Head", "LeftArm", "RightArm", "LeftLeg", "RightLeg", "Torso"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"HeadColor", "LeftArmColor", "RightArmColor", "LeftLegColor", "RightLegColor", "TorsoColor"}) do
        ava[v] = colorToTable(humdes[v])
    end

    for _, v in pairs({"GraphicTShirt", "Shirt", "Pants"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"IdleAnimation", "RunAnimation", "JumpAnimation", "SwimAnimation", "WalkAnimation", "ClimbAnimation", "FallAnimation"}) do
        ava[v] = humdes[v]
    end

    for _, v in pairs({"Hat", "Hair", "Back", "Face", "Front", "Neck", "Shoulders", "Waist"}) do
        ava[v .. "Accessory"] = humdes[v .. "Accessory"]
    end

    local layered = humdes:GetAccessories(false)
    for i, accessory in pairs(layered) do
        if accessory.AccessoryType and typeof(accessory.AccessoryType) == "EnumItem" then
            accessory.AccessoryType = accessory.AccessoryType.Name
        end
        accessory.Order = i
    end
    ava.AccessoryBlob = layered

    ava.Emotes = humdes:GetEmotes()

    return ava
end


local AvatarClipboard = nil
local AvatarClipboardName = "Unnamed"

local Section = Tab:CreateSection("Avatar Clipboard")
Section:Set("Avatar Clipboard")

local function copyToClip(data, name)
    if not data then
        AvatarClipboard = nil
        AvatarClipboardName = "Unnamed"
        Section:Set("Avatar Clipboard")
    else
        AvatarClipboard = data
        AvatarClipboardName = name
        Section:Set("Avatar Clipboard: " .. name)
    end
end

local function LoadPlayer(player)
    coroutine.wrap(function()
        if player ~= Players.LocalPlayer then
            local function LoadCharacter(character)
                local prox = Instance.new("ProximityPrompt", character:WaitForChild("HumanoidRootPart"))
                prox.ActionText = "Copy Avatar To Clipboard"
                prox.ObjectText = player.DisplayName
                prox.KeyboardKeyCode = Enum.KeyCode.C
                prox.HoldDuration = 0
                prox.RequiresLineOfSight = false
                prox.Triggered:Connect(function()
                    if character and character:FindFirstChild("Humanoid") and character.Humanoid:GetAppliedDescription() then
                        copyToClip(ExtractData(character.Humanoid.HumanoidDescription), player.DisplayName)
                    end
                end)
            end
            LoadCharacter(player.Character or player.CharacterAdded:Wait())
            player.CharacterAdded:Connect(LoadCharacter)
        end
    end)()
end

for _, player in pairs(Players:GetPlayers()) do
    LoadPlayer(player)
end
Players.PlayerAdded:Connect(LoadPlayer)

Tab:CreateButton({
    Name = "Copy Current Avatar",
    Callback = function()
        local player = Players.LocalPlayer
        local character = player.Character
        if character and character:FindFirstChild("Humanoid") and character.Humanoid:FindFirstChild("HumanoidDescription") then
            copyToClip(ExtractData(character.Humanoid.HumanoidDescription), player.DisplayName)
        end
    end
})

Tab:CreateButton({
    Name = "Load Avatar",
    Callback = function()
        if AvatarClipboard then
            game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(AvatarClipboard)
        end
    end
})

Tab:CreateButton({
    Name = "Save Avatar",
    Callback = function()
        if AvatarClipboard then
            local broadcastArgs = {
                [1] = "ZYNLOPE", 
                [2] = Enum.TextFilterContext.PublicChat
            }

            local functionConns = game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9)

            functionConns:WaitForChild("RequestBroadcastString", 9e9):InvokeServer(unpack(broadcastArgs))

            local saveArgs = {
                [1] = AvatarClipboard
            }

            functionConns:WaitForChild("NewAESaveOutfit", 9e9):InvokeServer(unpack(saveArgs))

         Rayfield:Notify({
                Title = "Avatar Saver",
                Content = "Avatar has been saved to Outfits. ",
                Duration = 3,
            })

        else
            Rayfield:Notify({
                Title = "Avatar Saver",
                Content = "No avatars in clipboard. ",
                Duration = 3,
            })
        end
    end
})

local LoadAvatarFromUserId = Tab:CreateInput({
   Name = "Load Avatar From UserId",
   CurrentValue = "",
   PlaceholderText = "enter userid",
   RemoveTextAfterFocusLost = false,
   Flag = "LoadAvatarUserId",
   Callback = function(userid)
      if userid and tonumber(userid) and Players:GetHumanoidDescriptionFromUserId(tonumber(userid)) then
         local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(tonumber(userid)))
        game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(data)
      end
   end,
})

local LoadAvatarFromUsername = Tab:CreateInput({
   Name = "Load Avatar From Username",
   CurrentValue = "",
   PlaceholderText = "enter username",
   RemoveTextAfterFocusLost = false,
   Flag = "LoadAvatarUsername",
   Callback = function(username)
      if username and Players:GetUserIdFromNameAsync(username) then
         local data = ExtractData(Players:GetHumanoidDescriptionFromUserId(Players:GetUserIdFromNameAsync(username)))
          game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(data)
      end
   end,
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Clipboard = setclipboard or toclipboard

Tab:CreateInput({
    Name = "Find Username (from server)",
    PlaceholderText = "enter displayname",
    RemoveTextAfterFocusLost = false,
    Callback = function(inputText)
        local match = nil
        inputText = inputText:lower()
        
        for _, player in pairs(Players:GetPlayers()) do
            if player.DisplayName:lower():find(inputText) then
                match = player
                break
            end
        end

        if match then
            if Clipboard then
                Clipboard(match.Name)
            end

            Rayfield:Notify({
                Title = "Username Copied!",
                Content = "Copied: " .. match.Name,
                Duration = 5,
            })
        else
            Rayfield:Notify({
                Title = "Player Not Found",
                Content = "No display name matched '" .. inputText .. "'",
                Duration = 5,
            })
        end
    end,
})

local Divider = Tab:CreateDivider()

Tab:CreateToggle({
    Name = "weeknd emote",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        local p = game:GetService("Players").LocalPlayer
        local c = p.Character or p.CharacterAdded:Wait()
        local h = c:FindFirstChildOfClass("Humanoid")
        
        if not getgenv().WeekndTrack then
            local a = Instance.new("Animation")
            a.AnimationId = "rbxassetid://71105746210464"
            getgenv().WeekndAnim = a
        end

        if Value then
            if h and not getgenv().WeekndTrack then
                getgenv().WeekndTrack = h:LoadAnimation(getgenv().WeekndAnim)
                getgenv().WeekndTrack.Looped = true
                getgenv().WeekndTrack:Play()
            end
        else
            if getgenv().WeekndTrack then
                getgenv().WeekndTrack:Stop()
                getgenv().WeekndTrack = nil
            end
        end
    end,
})

local avatarFits = {
    {name = "zynlope exploit fit", func = function()
        local args = {
            [1] = {
                ["HatAccessory"] = "33070696,9255011,259423244",
                ["RightLegColor"] = {[1] = "0", [2] = "0", [3] = "0"},
                ["Face"] = 42070576,
                ["WidthScale"] = 1,
                ["BodyTypeScale"] = 0,
                ["BackAccessory"] = "6736453833",
                ["FrontAccessory"] = "0",
                ["AccessoryBlob"] = {{["Order"] = 1, ["AssetId"] = 0, ["AccessoryType"] = "Jacket"}},
                ["Pants"] = 3911904807,
                ["RightArmColor"] = {[1] = "0", [2] = "0", [3] = "0"},
                ["LeftLegColor"] = {[1] = "0", [2] = "0", [3] = "0"},
                ["HairAccessory"] = "17327436421",
                ["HeadColor"] = {[1] = "0", [2] = "0", [3] = "0"},
                ["RightArm"] = 0,
                ["Torso"] = 0,
                ["IdleAnimation"] = 2510235063,
                ["RightLeg"] = 0,
                ["Shirt"] = 5081914658,
                ["GraphicTShirt"] = 76168825699893,
                ["ProportionScale"] = 0,
                ["RunAnimation"] = 619536621,
                ["NeckAccessory"] = "11996992458",
                ["TorsoColor"] = {[1] = "0", [2] = "0", [3] = "0"},
                ["DepthScale"] = 1,
                ["LeftArm"] = 0,
                ["HeadScale"] = 1.1,
                ["HeightScale"] = 1,
                ["LeftArmColor"] = {[1] = "0", [2] = "0", [3] = "0"},
                ["LeftLeg"] = 0,
            }
        }
        game:GetService("ReplicatedStorage").FunctionConnections.NewAESaveAvatar:InvokeServer(unpack(args))
    end},

{name = "get loading status", func = function()


local args = {
    [1] = 2,
    [2] = true
}

local args = {
    [1] = {
        ["WalkAnimation"] = 133304526526319;
        ["RightLegColor"] = {
            [1] = "255";
            [2] = "152";
            [3] = "220";
        };
        ["LeftArmColor"] = {
            [1] = "255";
            [2] = "152";
            [3] = "220";
        };
        ["Torso"] = 18087387307;
        ["ProportionScale"] = 0.5;
        ["JumpAnimation"] = 130373407996664;
        ["BodyTypeScale"] = 0;
        ["RunAnimation"] = 136276875045281;
        ["Shirt"] = 382537085;
        ["Emotes"] = {
            ["1"] = {
                [1] = 3576686446;
            };
            ["4"] = {
                [1] = 3576968026;
            };
            ["3"] = {
                [1] = 3576823880;
            };
            ["2"] = {
                [1] = 3360686498;
            };
        };
        ["Pants"] = 301810423;
        ["RightArmColor"] = {
            [1] = "255";
            [2] = "152";
            [3] = "220";
        };
        ["SwimAnimation"] = 128475661806875;
        ["HairAccessory"] = "135152736088285,62724852";
        ["Face"] = 86487766;
        ["RightArm"] = 18087387307;
        ["RightLeg"] = 18087387307;
        ["Head"] = 86498113;
        ["IdleAnimation"] = 101839542383818;
        ["LeftLegColor"] = {
            [1] = "255";
            [2] = "152";
            [3] = "220";
        };
        ["FallAnimation"] = 83937116921114;
        ["ClimbAnimation"] = 135810009801094;
        ["HeadColor"] = {
            [1] = "255";
            [2] = "152";
            [3] = "220";
        };
        ["TorsoColor"] = {
            [1] = "255";
            [2] = "152";
            [3] = "220";
        };
        ["DepthScale"] = 0.9550000000000001;
        ["LeftArm"] = 18087387307;
        ["HeadScale"] = 1;
        ["HeightScale"] = 0.91;
        ["WidthScale"] = 1;
        ["LeftLeg"] = 18087387307;
    };
}

game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections", 9e9):WaitForChild("NewAESaveAvatar", 9e9):InvokeServer(unpack(args))

end},

{name = "reset to roblox avatar", func = function()

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

        local player = Players.LocalPlayer
        local userId = player.UserId

        local success, description = pcall(function()
            return Players:GetHumanoidDescriptionFromUserId(userId)
        end)

        if success and description then
            local data = ExtractData(description)
            ReplicatedStorage.FunctionConnections.NewAESaveAvatar:InvokeServer(data)
        else
            warn("Failed to get HumanoidDescription.")
        end
end},

{name = "kid size", func = function()


local args = {
    [1] = 2,
    [2] = true
}

game:GetService("ReplicatedStorage").FunctionConnections.NewAERequestSetCheesyEffect:InvokeServer(unpack(args))

end},
}

for _, fit in ipairs(avatarFits) do
    Tab:CreateButton({
        Name = fit.name,
        Callback = fit.func,
    })
end

local Tab = Window:CreateTab("bypasser", 78656669261642) 
local Paragraph = Tab:CreateParagraph({Title = "WARNING:", Content = "Set your account language to Қазақ Тілі for every bypass to work."})
local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local Divider = Tab:CreateDivider()

	local function containsSwearWord(word)
		for swear in pairs(swearWords) do
			if word:lower():find(swear, 1, true) then
				return true
			end
		end
		return false
	end
	
	local lowercaseBypasses = {
	["fucking"] = "fบcking",
	["fuck"] = "fบck",
    ["fucked"] = "fบcked",
    ["fuckidy"] = "fบckidy",
    ["niggerest"] = "ⴖiggerest",
	["nigger"] = "ⴖigger",
	["niggers"] = "ⴖiggers",
	["nigga"] = "ⴖigga",
	["niggas"] = "ⴖiggas",
	["ass"] = "аรร",
    ["retard"] = "ꞅetard",
    ["bastard"] = "bลstลrd",
	["dumbass"] = "dบmbаรร",
	["bitch"] = "bi〪tch",
	["cunt"] = "cบnt",
	["hoe"] = "һoe",
	["hoes"] = "һoes",
	["pussy"] = "pบssy",
	["discord"] = "disִcord",
	["shit"] = "shi〪t",
	["raped"] = "rаped",
	["rape"] = "rаpe",
	["hitler"] = "hi〪tler",
	["porn"] = "porⴖ",
	["pornhub"] = "porⴖhub",
	["dick"] = "diᲃk",
	["dicks"] = "diᲃks",
	["dildo"] = "dil〪do",
	["dildos"] = "dil〪dos",
	["kill"] = "kіll",
	["yourself"] = "yoบrself",
	["faggot"] = "fลggot",
	["slut"] = "slบt",
	["sex"] = "sеִx",
	["cum"] = "cบm",
	["boobs"] = "bоִоִbs",
	["boob"] = "bоִоִb",
	["lmao"] = "lmao",
	["lmfao"] = "lmfao",
	["suck"] = "sบck",
	["sucker"] = "sบcker",
	["dirty"] = "dіrty",
	["fat"] = "fลt",
	["raping"] = "rลping"
}

local uppercaseBypasses = {
    ["FUCKING"] = "ꜰUCKING",
	["FUCK"] = "ꜰUCK",
    ["FUCKED"] = "ꜰUCKED",
    ["FUCKIDY"] = "ꜰUCKIDY",
    ["BITCH"] = "BI〪TCH",
    ["ASS"] = "AS〪S",
    ["NIGGA"] = "NI〪GGA",
	["NIGGAS"] = "NI〪GGAS",
    ["NIGGER"] = "NI〪GGER",
    ["NIGGEREST"] = "NI〪GGEREST",
	["NIGGERS"] = "NI〪GGERS",
    ["HOE"] = "HOE",
	["HOES"] = "HOES",
    ["CUNT"] = "CUN〪T",
	["DICK"] = "DI〪CK",
	["HITLER"] = "HI〪TLER",
	["PORN"] = "POR〪N",
	["RAPING"] = "RАPI〪NG",
	["RAPED"] = "RАPED",
	["RAPE"] = "RАPE",
	["FAGGOT"] = "ꜰAGGOT",
	["DISCORD"] = "DISִCORD",
	["SLUT"] = "SL〪UT",
	["SEX"] = "SЕִX",
	["LMAO"] = "LMAO",
	["LMFAO"] = "LMFAO",
	["DIRTY"] = "DІRTY",
    ["PUSSY"] = "Р〪USSY"
}

local function transformText(inputText)
    local transformedWords = {}

    for word in inputText:gmatch("%S+") do
        local cleaned = word:gsub("%p", "")
        local lowered = cleaned:lower()
        local replacedWord = word
        local found = false

        for bad, bypass in pairs(lowercaseBypasses) do
            local startIndex, endIndex = lowered:find(bad, 1, true)
            if startIndex then
                
                replacedWord = cleaned:sub(1, startIndex - 1) .. bypass .. cleaned:sub(endIndex + 1)
                found = true
                break
            end
        end

        if not found then
            for bad, bypass in pairs(uppercaseBypasses) do
                local loweredBad = bad:lower()
                local startIndex, endIndex = lowered:find(loweredBad, 1, true)
                if startIndex then
                    replacedWord = cleaned:sub(1, startIndex - 1) .. bypass .. cleaned:sub(endIndex + 1)
                    found = true
                    break
                end
            end
        end

        table.insert(transformedWords, replacedWord)
    end

    return table.concat(transformedWords, "")
end

	
	local function sendMessage(message)
		local channel = TextChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral")
		if channel then
			channel:SendAsync(message)
		end
	end

local Input = Tab:CreateInput({
    Name = "Auto bypasser",
    CurrentValue = "",
    PlaceholderText = "message here",
    RemoveTextAfterFocusLost = true,
    Flag = "Input1",
    Callback = function(Text)
        local transformedText = transformText(Text)
        local lines = {}
        table.insert(lines, transformedText)

        for _, line in ipairs(lines) do
            sendMessage(line)
            wait(0)
        end
    end,
})

local Button = Tab:CreateButton({
   Name = "Unban voice chat",
   Callback = function()
game:GetService("VoiceChatService"):joinVoice()
 end,
})

local Button = Tab:CreateButton({
   Name = "Rejoin",
   Callback = function()
 game:GetService("TeleportService"):Teleport(game.PlaceId)
	 wait()
 
 wait();
 end,
})

local Section = Tab:CreateSection("premade messages")


local messages = {
    {name = "got discord?", message = "gotdisᲃord?"},
    {name = "is this retard serious lmao 😭", message = "isthisꞅetardseriouslmao😭"},
    {name = "sorry lil faggot not my business", message = "sorrylilfลggotnotmybusiness"},
    {name = "kick that bitch nigger off the plane!!", message = "kickthatbi〪tchⴖiggerofftheplane!!"},
    {name = "wanna hop on vc instead lil nigga?", message = "wannahoponvcinsteadlilⴖigga?"},
    {name = "who wanna rape the lgbt fags with me?", message = "whowannarаpethelgbtfลgswithme?"},
    {name = "u look retarded yet so rapeable..", message = "ulookꞅetardedyetsorаpeable.."},
    {name = "whats the sauce of being this type of a dumbass?", message = "whatsthesauceofbeingthistypeofadum〪baรร?"}
}

local function sendMessage(message)
    local TextChatService = game:GetService("TextChatService")
    local textChannel = TextChatService:WaitForChild("TextChannels"):FindFirstChild("RBXGeneral")
    if textChannel then
        textChannel:SendAsync(message)
    end
end

for _, msg in pairs(messages) do
    Tab:CreateButton({
        Name = msg.name,
        Callback = function()
            sendMessage(msg.message)
        end,
    })
end


local Tab = Window:CreateTab("nerdy stuff", 126133429358591)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Section = Tab:CreateSection("backyard teleporter")


local Input = Tab:CreateInput({
   Name = "Enter User ID",
   CurrentValue = "",
   PlaceholderText = "Type User ID here...",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Text)
      
      _G.StoredUserID = tonumber(Text) 
   end,
})


local Button = Tab:CreateButton({
   Name = "Teleport to backyard CREDITS: SEMNEXO",
   Callback = function()
      if _G.StoredUserID then
         local success, err = pcall(function()
            ReplicatedStorage.FunctionConnections.RequestTeleportToBackyard:InvokeServer(_G.StoredUserID)
         end)

         game.StarterGui:SetCore("SendNotification", {
            Title = success and "Success!" or "Error!",
            Text = success and "Teleported successfully!" or "Teleport failed!",
            Duration = 3
         })
      else
         game.StarterGui:SetCore("SendNotification", {
            Title = "Error!",
            Text = "Invalid User ID! Please enter a valid ID.",
            Duration = 3
         })
      end
   end,
})

local Players = game:GetService("Players")


local UsernameInput = Tab:CreateInput({
   Name = "Enter Username",
   CurrentValue = "",
   PlaceholderText = "Type username here...",
   RemoveTextAfterFocusLost = false,
   Flag = "UsernameInput",
   Callback = function(Text)
      _G.StoredUsername = Text 
   end,
})


local CopyButton = Tab:CreateButton({
   Name = "Get & Copy User ID",
   Callback = function()
      if _G.StoredUsername and _G.StoredUsername ~= "" then
         local success, userId = pcall(function()
            return Players:GetUserIdFromNameAsync(_G.StoredUsername)
         end)

         if success and userId then
            setclipboard(tostring(userId)) 
            game.StarterGui:SetCore("SendNotification", {
               Title = "User ID Copied!",
               Text = "User ID: " .. userId,
               Duration = 3
            })
         else
            game.StarterGui:SetCore("SendNotification", {
               Title = "User Not Found!",
               Text = "Check the username and try again.",
               Duration = 3
            })
         end
      else
         game.StarterGui:SetCore("SendNotification", {
            Title = "Error!",
            Text = "Please enter a username.",
            Duration = 3
         })
      end
   end,
})

local Divider = Tab:CreateDivider()

local Button = Tab:CreateButton({
   Name = "Firework (Manual)",
   Callback = function()
 game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
        game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
        game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spam pizza plate", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 685,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 685 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local spawnFirework = false 
local fireworkLoop 

local Toggle = Tab:CreateToggle({
   Name = "Spawn Fireworks (Normal)",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(value)
   spawnFirework = value
		if spawnFirework then
			
			fireworkLoop = coroutine.create(function()
				while spawnFirework do
					game:GetService("ReplicatedStorage").Connection:InvokeServer(202, 1310)
					game:GetService("ReplicatedStorage").Connection:InvokeServer(201, 1310, {})
					game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(210)
					wait(1.5) 
				end
			end)
			coroutine.resume(fireworkLoop)
		else
			
			spawnFirework = false
		end
   end,
})


 local running = false
    local loopThread
    local steppedConnection
    local Connection = ReplicatedStorage:WaitForChild("Connection")
    local ConnectionEvent = ReplicatedStorage:WaitForChild("ConnectionEvent")
    local RunService = game:GetService("RunService")

    local function fireworkV2()
        while running do
            Connection:InvokeServer(202, 1310, {Position = Vector3.new(0, -15, 100)})
            Connection:InvokeServer(201, 1310, {})
            task.wait(1.5)
        end
    end

    Tab:CreateToggle({
        Name = "Multi Spam Fireworks (Best)",
        CurrentValue = false,
        Flag = "Toggle1",
        Callback = function(value)
            running = value

            if running then
                loopThread = task.spawn(function()
                    fireworkV2()
                end)

                steppedConnection = RunService.Stepped:Connect(function()
                    if running then
                        ConnectionEvent:FireServer(210)
                    end
                end)
            else
                if steppedConnection then
                    steppedConnection:Disconnect()
                    steppedConnection = nil
                end
            end
        end
    })
local animationTrack

local Toggle = Tab:CreateToggle({
    Name = "Fake ZZZ",
    CurrentValue = false,
    Flag = "ToggleExample",
    Callback = function(Value)
        
        local animationId = "rbxassetid://2176786857"
        local animation = Instance.new("Animation")
        animation.AnimationId = animationId

       
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character:WaitForChild("Humanoid")

      
        local args = {
            [1] = Value, 
            [2] = 1
        }

        if Value then
           
            if not animationTrack or animationTrack.IsPlaying == false then
                animationTrack = humanoid:LoadAnimation(animation)
                animationTrack:Play()
            end

            
            game:GetService("ReplicatedStorage").EventConnections.SetCharacterIsSleeping:FireServer(unpack(args))
        else
           
            if animationTrack and animationTrack.IsPlaying then
                animationTrack:Stop()
            end

           
            args[1] = false
            game:GetService("ReplicatedStorage").EventConnections.SetCharacterIsSleeping:FireServer(unpack(args))
        end
    end,
})


local Toggle = Tab:CreateToggle({
   Name = "Spam turkey", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 687,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 687 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local Toggle = Tab:CreateToggle({
   Name = "Spam pizza plate", 
   CurrentValue = false,
   Flag = "Toggle1",
   Callback = function(value)
        isSpamming = value
        if isSpamming then
            spawn(function()
                while isSpamming do
                    local player = game.Players.LocalPlayer
                    local character = player.Character
                    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

                    local characterPosition = humanoidRootPart.Position

                    local rayOrigin = characterPosition + Vector3.new(0, 5, 0)
                    local rayDirection = Vector3.new(0, -10, 0)

                    local raycastResult = workspace:Raycast(rayOrigin, rayDirection)

                    local groundPosition
                    if raycastResult then
                        groundPosition = raycastResult.Position
                    else
                        groundPosition = characterPosition - Vector3.new(0, 5, 0)
                    end

                    local plantPosition = groundPosition + Vector3.new(0, -3, 0)

                    local args1 = { [1] = 201, [2] = 1372, [3] = {} }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args1))

                    local args2 = {
                        [1] = 685,
                        [2] = plantPosition
                    }
                    game:GetService("ReplicatedStorage"):WaitForChild("FunctionConnections"):WaitForChild("SpecialObjectRequestPlant"):InvokeServer(unpack(args2))

                    local args3 = { [1] = 202, [2] = 685 }
                    game:GetService("ReplicatedStorage"):WaitForChild("Connection"):InvokeServer(unpack(args3))

                    wait(0.08)
                end
            end)
        else
            isSpamming = false
        end
    end,
})

local Button = Tab:CreateButton({
   Name = "Give snowball all (BUGGY)",
   Callback = function()
     local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local isRunning = false 

local function equipItem()
    local equipArgs = {201, 932}
    local success, result = pcall(function()
        ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(equipArgs))
    end)
    if not success then
        warn("Equip item failed:", result)
    end
end

local function unEquip()
    local args = {
        [1] = 202,
    }
    pcall(function()
        ReplicatedStorage:WaitForChild("Connection"):InvokeServer(unpack(args))
    end)
end

local function hasItemEquipped(player)
    local equippedItems = player:FindFirstChild("Backpack"):FindFirstChild(932)
    return equippedItems ~= nil
end

local function giveItemToAllPlayers()
    for _, player in pairs(Players:GetPlayers()) do
        if not hasItemEquipped(player) then
            local giveArgs = {player.UserId, 932}
            local success, result = pcall(function()
                ReplicatedStorage:WaitForChild("FunctionConnections"):WaitForChild("RequestSendPassAlongActionItem"):InvokeServer(unpack(giveArgs))
            end)
            if not success then
                warn("Give item failed for " .. player.Name .. ":", result)
            end
        end
    end
end

while true do
    if not isRunning then
        isRunning = true
        
        equipItem()
        giveItemToAllPlayers()
        unEquip()
        
        isRunning = false
    else
        wait(1)
    end
    wait(2)
end

   end,
})

local Button = Tab:CreateButton({
   Name = "Throw snowball all",
   Callback = function()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local ThrowItemEvent = ReplicatedStorage.EventConnections.ThrowItem
local RunService = game:GetService("RunService")

local function getRandomPlayer()
    local allPlayers = Players:GetPlayers()
    local randomIndex = math.random(1, #allPlayers)
    local randomPlayer = allPlayers[randomIndex]
    if randomPlayer and randomPlayer.Character and randomPlayer.Character:FindFirstChild("HumanoidRootPart") then
        return randomPlayer
    else
        return nil
    end
end

local function throwAtRandomPlayer()
    local randomPlayer = getRandomPlayer()
    if randomPlayer then
        local targetPosition = randomPlayer.Character.HumanoidRootPart.Position
        local args = {
            [1] = string.format("[932,[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],[\"%s\",\"%s\",\"%s\"],75]",
                tostring(targetPosition.X), tostring(targetPosition.Y), tostring(targetPosition.Z),
                tostring(targetPosition.X + 3), tostring(targetPosition.Y + 3), tostring(targetPosition.Z + 3),
                tostring(targetPosition.X - 3), tostring(targetPosition.Y - 3), tostring(targetPosition.Z - 3))
        }
        ThrowItemEvent:FireServer(unpack(args))
    end
end

RunService.Heartbeat:Connect(function()
    for _ = 1, 1 do
        throwAtRandomPlayer()
    end
end)
   end,
})


local Section = Tab:CreateSection("Balloon Spawner")

local Dropdown = Tab:CreateDropdown({
   Name = "Select balloon",  
   Options = {"Red", "Blue", "Green", "Purple", "White", "Heart"},  
   CurrentOption = {"Red"},  
   MultipleOptions = false,  
   Flag = "BalloonColor",  
   Callback = function(Options)
      
      selectedBalloonColor = Options[1]
      print("Selected balloon color: " .. selectedBalloonColor)
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Start spawning balloon type",  
   CurrentValue = false,  
   Flag = "SpawnBalloons",  
   Callback = function(Value)
      
      spawnBalloons = Value
      print("Spawning balloons: " .. tostring(spawnBalloons))

      if spawnBalloons then
         
         task.spawn(function()
            while spawnBalloons do
               
               local balloonID
               if selectedBalloonColor == "Red" then
                  balloonID = 1311
               elseif selectedBalloonColor == "Blue" then
                  balloonID = 1312
               elseif selectedBalloonColor == "Green" then
                  balloonID = 1313
               elseif selectedBalloonColor == "Purple" then
                  balloonID = 1314
               elseif selectedBalloonColor == "White" then
                  balloonID = 1315
               elseif selectedBalloonColor == "Heart" then
                  balloonID = 1039  
               end

               
               local args = {
                  [1] = 201,
                  [2] = balloonID,
                  [3] = {}
               }

               local args2 = {
                  [1] = 202
               }

               game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
               game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

               task.wait(0)  
            end
         end)
      end
   end,
})

local spawnAllBalloons = false 

local Toggle = Tab:CreateToggle({
   Name = "Spawn all balloons",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
spawnAllBalloons = Value 
		print("Spawning all balloons: " .. tostring(spawnAllBalloons))

		if spawnAllBalloons then
			
			task.spawn(function()
				while spawnAllBalloons do
					
					local args = {
						[1] = 201,
						[2] = 1311,
						[3] = {}
					}
					local args2 = {
						[1] = 202
					}
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1312
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1313
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1314
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1315
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					
					args[2] = 1039
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args))
					game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

					task.wait(0) 
				end
			end)
		end
   end,
})

local Section = Tab:CreateSection("Other")

local Button = Tab:CreateButton({
   Name = "Wear all items (Rejoin to remove them)",
   Callback = function()
 
      local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function tryID(id)
    print("ID'ler test ediliyor:", id)
    ReplicatedStorage.Connection:InvokeServer(201, id, {})
end

for id = 0, 8000 do
    coroutine.wrap(tryID)(id)  
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Quick access rejoin",
   Callback = function()
 game:GetService("TeleportService"):Teleport(game.PlaceId)
	 wait()
	 
 
 
 wait();
   end,
})

local Tab = Window:CreateTab("skibidi stuff", 16365563022) 

local Section = Tab:CreateSection("give people rods")

local Button = Tab:CreateButton({
   Name = "Enable Inventory",
   Callback = function()
game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, true)
    game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack, true)
    game.StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, true)
   end,
})

local Button = Tab:CreateButton({
   Name = "Equip all fishing rod (Manual, Optional)",
   Callback = function()
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")

local function equipAllTools()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character 
        end
    end
end

equipAllTools()
   end,
})

local Button = Tab:CreateButton({
   Name = "Equip fishingrod (Manual, Optional)",
   Callback = function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local function getItem()
    ReplicatedStorage.Connection:InvokeServer(9, 0)
    wait(0.1) 

    ReplicatedStorage.Connection:InvokeServer(9, 1)

    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)
    
    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), 
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end

getItem()
   end,
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Toggle = false 


local function equipAllTools()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character 
        end
    end
end


local function getItem()
    
    ReplicatedStorage.Connection:InvokeServer(9, 0) 
    wait(0.1) 

    
    ReplicatedStorage.Connection:InvokeServer(9, 1) 

    
    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)

    
    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), 
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end


local function startFishing()
    while Toggle do
        
        for _ = 1, 1 do
            spawn(function() 
                equipAllTools()
            end)

            spawn(function()
                getItem()
            end)
        end
        wait(0) 
    end
end

local Toggle = Tab:CreateToggle({
   Name = "Loop Equip FishingRods (No lag)",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(value)
  Toggle = value
        if Toggle then
            startFishing() 
        end
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Loop Drop Rods",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(value)
 isSpamming = value 
        
        if isSpamming then
            
            spawn(function()
                while isSpamming do
                    
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
                    wait(0) 
                end
            end)
        end
   end,
})

local player = game.Players.LocalPlayer
local rs = game:GetService("ReplicatedStorage")
local ws = game:GetService("Workspace")
local runService = game:GetService("RunService")
local vim = game:GetService("VirtualInputManager")

local char = player.Character or player.CharacterAdded:Wait()
local bp = player:WaitForChild("Backpack")
local conn = rs:WaitForChild("Connection")
local connEvent = rs:WaitForChild("ConnectionEvent")

local running = false
local steppedConn, spinObj

function equipAllTools()
    for _, tool in pairs(bp:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = char
        end
    end
end

function getItem()
    conn:InvokeServer(9, 0)
    task.wait(0.1)
    conn:InvokeServer(9, 1)
    conn:InvokeServer(49)
    conn:InvokeServer(50)
    conn:InvokeServer(51)

    conn:InvokeServer(11, {
        FishingPolePos = ws.TempFish.Position,
        Power = math.random(),
        Face = ws.TempFish.Position,
        PlayerPos = ws.TempFish.Position,
        FishingZonePos = Vector3.new(-5.29345703, -18.0412292, 43.7173767)
    })
end

function fireworkSpam()
    while running do
        conn:InvokeServer(202, 1310, {Position = Vector3.new(0, -15, 100)})
        conn:InvokeServer(201, 1310, {})
        task.wait(1.5)
    end
end

function rodLoop()
    while running do
        task.spawn(equipAllTools)
        task.spawn(getItem)
        task.spawn(function()
            vim:SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
        end)
        task.wait(0)
    end
end

function startSpin()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    for _, v in pairs(hrp:GetChildren()) do
        if v.Name == "Spinning" then
            v:Destroy()
        end
    end

    spinObj = Instance.new("BodyAngularVelocity")
    spinObj.Name = "Spinning"
    spinObj.Parent = hrp
    spinObj.MaxTorque = Vector3.new(0, math.huge, 0)
    spinObj.AngularVelocity = Vector3.new(0, 20, 0)
end

function stopSpin()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    for _, v in pairs(hrp:GetChildren()) do
        if v.Name == "Spinning" then
            v:Destroy()
        end
    end
    spinObj = nil
end

Tab:CreateToggle({
    Name = "RAID SERVER (INCREASE PING)",
    CurrentValue = false,
    Flag = "MegaToggleSpin",
    Callback = function(val)
        running = val
        if running then
            task.spawn(rodLoop)
            task.spawn(fireworkSpam)
            startSpin()
            steppedConn = runService.Stepped:Connect(function()
                if running then
                    connEvent:FireServer(210)
                end
            end)
        else
            if steppedConn then steppedConn:Disconnect() steppedConn = nil end
            stopSpin()
        end
    end
})


local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Toggle = false 
local isSpamming = false 

local function equipAllTools()
    for _, tool in pairs(backpack:GetChildren()) do
        if tool:IsA("Tool") then
            tool.Parent = character 
        end
    end
end

local function getItem()
    ReplicatedStorage.Connection:InvokeServer(9, 0)
    wait(0.1)

    ReplicatedStorage.Connection:InvokeServer(9, 1)

    ReplicatedStorage.Connection:InvokeServer(49)
    ReplicatedStorage.Connection:InvokeServer(50)
    ReplicatedStorage.Connection:InvokeServer(51)

    local ohNumber1 = 11
    local ohTable2 = {
        ["FishingPolePos"] = Workspace.TempFish.Position,
        ["Power"] = math.random(), 
        ["Face"] = Workspace.TempFish.Position,
        ["PlayerPos"] = Workspace.TempFish.Position,
        ["FishingZonePos"] = Vector3.new(-5.29345703, -18.0412292, 43.7173767),
    }
    ReplicatedStorage.Connection:InvokeServer(ohNumber1, ohTable2)
end


local function startFishing()
    while Toggle do
        
        for _ = 1, 1000 do
            spawn(function() 
                equipAllTools()
            end)

            spawn(function()
                getItem()
            end)
        end
        wait(0) 
    end
end

local Button = Tab:CreateButton({
   Name = "LAG SERVER",
   Callback = function()
 
        
        isSpamming = true
        spawn(function()
            while isSpamming do
                
                game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.Backspace, false, game)
                wait(1) 
            end
        end)

        
        Toggle = true
        startFishing() 
   end,
})

local Section = Tab:CreateSection("mess up animation")

local Button = Tab:CreateButton({
   Name = "Loop Animation",
   Callback = function()
game.Players.LocalPlayer.Character.Animate.Disabled = true
   end,
})

local Button = Tab:CreateButton({
   Name = "Unloop Animation",
   Callback = function()
game.Players.LocalPlayer.Character.Animate.Disabled = false
   end,
})

local Input = Tab:CreateInput({
   Name = "Animation Speed",
   CurrentValue = "",
   PlaceholderText = "enter speed",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(value)
     local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(value)
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Double speed",
   Callback = function()
 local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(v.Speed * 2)
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Decrease speed",
   Callback = function()
local giga = game.Players.LocalPlayer.Character
    local liga = giga:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")

    for i,v in next, liga:GetPlayingAnimationTracks() do
        v:AdjustSpeed(v.Speed * 0.5)
    end
   end,
})

local Section = Tab:CreateSection("auto catch and sell fishes on playground")
local Toggle = Tab:CreateToggle({
   Name = "Spoof PLUS",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
if Value then
			
			game.Players.LocalPlayer:SetAttribute("PLUS", true)
		else
			
			game.Players.LocalPlayer:SetAttribute("PLUS", false)
		end
   end,
})

local antiAFK = false
local Button = Tab:CreateButton({
   Name = "Anti AFK",
   Callback = function()
 antiAFK = not antiAFK
    if antiAFK then
   local player = game.Players.LocalPlayer
local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"

game.StarterGui:SetCore("SendNotification", {
    Title = "Anti AFK",
    Text = "Anti-AFK enabled",
    Icon = playerHeadIcon,
    Duration = 3,
    Button1 = "ok"
})
        local vu = game:GetService("VirtualUser")
        game.Players.LocalPlayer.Idled:Connect(function()
            vu:CaptureController()
            vu:ClickButton2(Vector2.new(0, 0))
        end)
    else
     local player = game.Players.LocalPlayer
local playerHeadIcon = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. player.UserId .. "&width=420&height=420&format=png"
        game.StarterGui:SetCore("SendNotification", {
    Title = "Anti AFK",
    Text = "Anti-AFK disabled (requires rejoin to reset Idled connection)",
    Icon = playerHeadIcon,
    Duration = 3,
    Button1 = "nigga"
})
    end
   end,
})

local Button = Tab:CreateButton({
   Name = "Start Farming",
   Callback = function()
 while true do
    
    local args1 = { [1] = 10 }
    game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(unpack(args1))

    
    local args2 = {
        [1] = 11,
        [2] = {
            ["Power"] = 1,
            ["FishingZonePos"] = Vector3.new(82.066064453125, -18.149871826171875, 96.40253448486328),
            ["Face"] = Vector3.new(0.9990392923355103, 0.005603702738881111, -0.04346461594104767),
            ["PlayerPos"] = Vector3.new(62.121219635009766, -12.388772010803223, 93.4290542602539),
            ["FishingPolePos"] = Vector3.new(64.75240325927734, -5.818235397338867, 94.7131118774414)
        }
    }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args2))

    
    local args3 = { [1] = 49 }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args3))

    
    local args4 = { [1] = 10 }
    game:GetService("ReplicatedStorage").ConnectionEvent:FireServer(unpack(args4))

    
    local args5 = { [1] = 50 }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args5))

    
    local args6 = { [1] = 51 }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args6))

    
    local args7 = { [1] = 9, [2] = 23 }
    game:GetService("ReplicatedStorage").Connection:InvokeServer(unpack(args7))

    
    wait(0)  
end
   end,
})

local Button = Tab:CreateButton({
   Name = "Rejoin",
   Callback = function()
local TeleportService = game:GetService("TeleportService")
    TeleportService:Teleport(game.PlaceId)
   end,
})

local Section = Tab:CreateSection("other stuff")

local FLYING = false

local function sFLY()
    FLYING = true
    repeat task.wait() until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
    local T = game.Players.LocalPlayer.Character.PrimaryPart
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local SPEED = 0
    local BG = Instance.new('BodyGyro')
    local BV = Instance.new('BodyVelocity')

    BG.P = 9e4
    BG.Parent = T
    BV.Parent = T
    BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    BG.cframe = T.CFrame
    BV.velocity = Vector3.new(0, 0, 0)
    BV.maxForce = Vector3.new(9e9, 9e9, 9e9)

    local userInputService = game:GetService("UserInputService")

    local humanoid = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
    humanoid:ChangeState(Enum.HumanoidStateType.Physics)
    humanoid.PlatformStand = true

    userInputService.InputBegan:Connect(function(input, gameProcessed)
        if gameProcessed then return end
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 1 end
            if input.KeyCode == Enum.KeyCode.S then CONTROL.B = -1 end
            if input.KeyCode == Enum.KeyCode.A then CONTROL.L = -1 end
            if input.KeyCode == Enum.KeyCode.D then CONTROL.R = 1 end
            if input.KeyCode == Enum.KeyCode.Space then CONTROL.E = 1 end
            if input.KeyCode == Enum.KeyCode.LeftControl then CONTROL.Q = -1 end
        end
    end)

    userInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.W then CONTROL.F = 0 end
            if input.KeyCode == Enum.KeyCode.S then CONTROL.B = 0 end
            if input.KeyCode == Enum.KeyCode.A then CONTROL.L = 0 end
            if input.KeyCode == Enum.KeyCode.D then CONTROL.R = 0 end
            if input.KeyCode == Enum.KeyCode.Space then CONTROL.E = 0 end
            if input.KeyCode == Enum.KeyCode.LeftControl then CONTROL.Q = 0 end
        end
    end)

    task.spawn(function()
    while FLYING do
        task.wait()

        
        local cam = workspace.CurrentCamera
        local forward = cam.CFrame.LookVector
        local right = cam.CFrame.RightVector
        local up = Vector3.new(0, 1, 0)

        
        local moveDir = (forward * (CONTROL.F + CONTROL.B)) + (right * (CONTROL.R + CONTROL.L)) + (up * (CONTROL.E + CONTROL.Q))
        if moveDir.Magnitude > 0 then
            moveDir = moveDir.Unit
            SPEED = 50
        else
            SPEED = 0
        end

        BV.Velocity = moveDir * SPEED
        BG.CFrame = cam.CFrame
    end

    
    BG:Destroy()
    BV:Destroy()
    humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    humanoid.PlatformStand = false
end)

end

local function NOFLY()
    FLYING = false
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = game.Players.LocalPlayer.Character.Humanoid
        humanoid.PlatformStand = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
    end
end

getgenv().WalkSpeedValue = 25
local BunnyHopActive = false
local BunnyHopConnection

local Player = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local Humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") or Player.CharacterAdded:Wait():WaitForChild("Humanoid")

RunService.Heartbeat:Connect(function()
    if BunnyHopActive and Humanoid.WalkSpeed ~= getgenv().WalkSpeedValue then
        Humanoid.WalkSpeed = getgenv().WalkSpeedValue
    end
end)

getgenv().WalkSpeedValue = 25
local BunnyHopActive = false
local BunnyHopConnection

local Player = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")
local Humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid") or Player.CharacterAdded:Wait():WaitForChild("Humanoid")

RunService.Heartbeat:Connect(function()
    if BunnyHopActive and Humanoid.WalkSpeed ~= getgenv().WalkSpeedValue then
        Humanoid.WalkSpeed = getgenv().WalkSpeedValue
    end
end)

local FlyToggle = Tab:CreateToggle({
    Name = "Fly/Unfly",
    CurrentValue = false,
    Flag = "FlyToggle",
    Callback = function(Value)
        if Value then
            if FLYING == false then
                sFLY()
            end
        else
            if FLYING == true then
                NOFLY()
            end
        end
    end,
})


local FlyKeybind = Tab:CreateKeybind({
    Name = "Fly keybind",
    CurrentKeybind = "F", 
    HoldToInteract = false,
    Flag = "FlyKeybind", 
    Callback = function(Keybind)
        if FLYING then
            NOFLY()
        else
            sFLY()
        end
    end,
})

local Input = Tab:CreateInput({
   Name = "Walkspeed",
   CurrentValue = "",
   PlaceholderText = "enter walkspeed",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
   getgenv().WalkSpeedValue = Value; 
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'WalkSpeed':Connect(function()
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
end)
Player.Character.Humanoid.WalkSpeed = getgenv().WalkSpeedValue;
   end,
})

local Input = Tab:CreateInput({
   Name = "Max Camera Zoom",
   CurrentValue = "",
   PlaceholderText = "enter zoom",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
        game.Players.LocalPlayer.CameraMaxZoomDistance = (Value)

   end,
})

local Input = Tab:CreateInput({
   Name = "Jumppower",
   CurrentValue = "",
   PlaceholderText = "enter jumppower",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
 getgenv().JumpPowerValue = Value; 
local Player = game:service'Players'.LocalPlayer;
Player.Character.Humanoid:GetPropertyChangedSignal'JumpPower':Connect(function()
Player.Character.Humanoid.JumpPower = getgenv().JumpPowerValue;
end)
Player.Character.Humanoid.JumpPower = getgenv().JumpPowerValue;
   end,
})

local Input = Tab:CreateInput({
   Name = "FOV (Original = 70)",
   CurrentValue = "",
   PlaceholderText = "enter FOV",
   RemoveTextAfterFocusLost = false,
   Flag = "Input1",
   Callback = function(Value)
        game.Players.LocalPlayer.CameraMaxZoomDistance = (Value)

   end,
})

local Divider = Tab:CreateDivider()

local Button = Tab:CreateButton({
   Name = "CS Resoluiton",
   Callback = function()
   getgenv().Resolution = {
    [".gg/scripters"] = 0.7
}

local Camera = workspace.CurrentCamera
if getgenv().gg_scripters == nil then
    game:GetService("RunService").RenderStepped:Connect(
        function()
            Camera.CFrame = Camera.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().Resolution[".gg/scripters"], 0, 0, 0, 1)
        end
    )
end
getgenv().gg_scripters = "Aori0001"
   end,
})


local Button = Tab:CreateButton({
   Name = "Fake Lag",
   Callback = function()
FakeLag = true
 
 repeat wait()
     game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = true
     wait(0.05)
      game.Players.LocalPlayer.Character.HumanoidRootPart.Anchored = false
      wait(0.05)
 until FakeLag == false
   end,
})

local Button = Tab:CreateButton({
   Name = "Stop Fake Lag",
   Callback = function()
FakeLag = false
   end,
})

local Tab = Window:CreateTab("useful stuff", 133113532239316) 
local Section = Tab:CreateSection("some things you may use")
local moreScripts = {
    {name = "Infinite Yield", url = "https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"},
    {name = "Orca Admin", url = "https://raw.githubusercontent.com/richie0866/orca/master/public/latest.lua", useHttpGetAsync = true},
    {name = "Nameless Admin", url = "https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"},
    {name = "Remote spy (works for xeno/solara and more)", url = "https://raw.githubusercontent.com/InfernusScripts/Octo-Spy/refs/heads/main/Main.lua"},
    {name = "Dex", url = "https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"},
    {name = "Invisibility", url = "https://pastebin.com/raw/3Rnd9rHf"},
    {name = "R15 Animations GUI", url = "https://pastebin.com/raw/5HNpk2yN"},
    {name = "R15 Animations GUI 2", url = "https://raw.githubusercontent.com/ExploitFin/AquaMatrix/refs/heads/AquaMatrix/AquaMatrix"},
    {name = "Enable Collisions", url = "custom", func = function()
        
        local LP = game.Players.LocalPlayer
        while task.wait(3) do
            for _, v in pairs(game.Players:GetDescendants()) do
                if v:IsA("Player") and workspace:FindFirstChild(v.Name) and v ~= LP and workspace[v.Name]:FindFirstChild("CHECKER") == nil then
                    local checker = Instance.new("BoolValue", workspace[v.Name])
                    checker.Name = "CHECKER"
                    for _, part in pairs(workspace:WaitForChild(v.Name):GetDescendants()) do
                        if part:IsA("Part") or part:IsA("MeshPart") then
                            local collider = Instance.new("Part", part)
                            collider.Size = part.Size
                            collider.Position = part.Position
                            collider.Transparency = 1
                            local weld = Instance.new("Weld", part)
                            weld.Part0 = part
                            weld.Part1 = collider
                        end
                    end
                end
            end
        end
    end},
    {name = "Turn r15 animations to r6", url = "https://raw.githubusercontent.com/Imagnir/r6_anims_for_r15/main/r6_anims.lua", useHttpGetAsync = true},
}

for _, scriptInfo in ipairs(moreScripts) do
    Tab:CreateButton({
        Name = scriptInfo.name,
        Callback = function()
            if scriptInfo.url == "custom" and scriptInfo.func then
                scriptInfo.func()
            else
                if scriptInfo.useHttpGetAsync then
                    loadstring(game:HttpGetAsync(scriptInfo.url))()
                else
                    loadstring(game:HttpGet(scriptInfo.url))()
                end
            end
        end,
    })
end


local originalClothing = {}

local function removeClothing(character)
    
    if not originalClothing[character] then
        originalClothing[character] = {}

        
        local shirt = character:FindFirstChildOfClass("Shirt")
        local pants = character:FindFirstChildOfClass("Pants")
        if shirt then
            originalClothing[character].shirtTemplate = shirt.ShirtTemplate
        end
        if pants then
            originalClothing[character].pantsTemplate = pants.PantsTemplate
        end

        
        local layeredShirt = character:FindFirstChildOfClass("ShirtGraphic")
        local layeredPants = character:FindFirstChildOfClass("Pants")
        if layeredShirt then
            originalClothing[character].layeredShirtGraphic = layeredShirt.Graphic
        end
        if layeredPants then
            originalClothing[character].layeredPantsTemplate = layeredPants.PantsTemplate
        end

        
        originalClothing[character].accessories = {}
        for _, item in pairs(character:GetChildren()) do
            if item:IsA("Accessory") then
                table.insert(originalClothing[character].accessories, item)
            end
        end
    end

    
    local shirt = character:FindFirstChildOfClass("Shirt")
    local pants = character:FindFirstChildOfClass("Pants")
    if shirt then
        shirt.ShirtTemplate = "http://www.roblox.com/asset/?id=0"
    end
    if pants then
        pants.PantsTemplate = "http://www.roblox.com/asset/?id=0"
    end

    
    local layeredShirt = character:FindFirstChildOfClass("ShirtGraphic")
    local layeredPants = character:FindFirstChildOfClass("Pants")
    if layeredShirt then
        layeredShirt.Graphic = "http://www.roblox.com/asset/?id=0"
    end
    if layeredPants then
        layeredPants.PantsTemplate = "http://www.roblox.com/asset/?id=0"
    end

    
    for _, item in pairs(character:GetChildren()) do
        if item:IsA("Accessory") then
            
            if not (item.AccessoryType == Enum.AccessoryType.Hat or item.AccessoryType == Enum.AccessoryType.Hair) then
                
                item:Destroy()
            end
        end
    end
end

local function restoreClothing(character)
    
    if originalClothing[character] then
        local shirt = character:FindFirstChildOfClass("Shirt")
        local pants = character:FindFirstChildOfClass("Pants")
        if shirt then
            shirt.ShirtTemplate = originalClothing[character].shirtTemplate
        end
        if pants then
            pants.PantsTemplate = originalClothing[character].pantsTemplate
        end

        
        local layeredShirt = character:FindFirstChildOfClass("ShirtGraphic")
        local layeredPants = character:FindFirstChildOfClass("Pants")
        if layeredShirt then
            layeredShirt.Graphic = originalClothing[character].layeredShirtGraphic
        end
        if layeredPants then
            layeredPants.PantsTemplate = originalClothing[character].layeredPantsTemplate
        end

        
        for _, item in pairs(originalClothing[character].accessories) do
            local clonedItem = item:Clone()
            clonedItem.Parent = character
        end
    end
end

local Toggle = Tab:CreateToggle({
   Name = "Remove player clothes (visual)",
   CurrentValue = false,
   Flag = "Toggle1", 
   Callback = function(Value)
   for _, player in pairs(game:GetService("Players"):GetPlayers()) do
            
            if player ~= game.Players.LocalPlayer then
                local character = player.Character or player.CharacterAdded:Wait()
                if Value then
                    removeClothing(character)  
                else
                    restoreClothing(character)  
                end
            end
        end
   end,
})
